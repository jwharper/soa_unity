// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autonomy.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AutonomyMsg {

  /// <summary>Holder for reflection information generated from autonomy.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class AutonomyReflection {

    #region Descriptor
    /// <summary>File descriptor for autonomy.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AutonomyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5hdXRvbm9teS5wcm90bxIMYXV0b25vbXlfbXNnIogBCgxHcGJfR3JpZFNw",
            "ZWMSEwoLYmVsaWVmX3RpbWUYASABKAQSDgoGaGVpZ2h0GAIgASgFEg0KBXdp",
            "ZHRoGAMgASgFEhQKDGdyaWRPcmlnaW5feBgEIAEoAhIUCgxncmlkT3JpZ2lu",
            "X3oYBSABKAISGAoQZ3JpZFRvV29ybGRTY2FsZRgGIAEoAiKEAQoSR3BiX0Nh",
            "c3VhbHR5UGlja3VwEhMKC2JlbGllZl90aW1lGAEgASgEEhQKDHJlcXVlc3Rf",
            "dGltZRgCIAEoBBIQCghhY3Rvcl9pZBgDIAEoBRIOCgZncmVlZHkYBCABKAgS",
            "CwoDaWRzGAUgAygFEhQKDG11bHRpcGxpY2l0eRgGIAMoBSKSAQoLR3BiX05H",
            "T1NpdGUSEwoLYmVsaWVmX3RpbWUYASABKAQSCgoCaWQYAiABKAUSKQoFY2Vs",
            "bHMYAyADKAsyGi5hdXRvbm9teV9tc2cuR3BiX0dyaWRDZWxsEhAKCHN1cHBs",
            "aWVzGAQgASgCEhIKCmNhc3VhbHRpZXMYBSABKAISEQoJY2l2aWxpYW5zGAYg",
            "ASgCInQKCEdwYl9TUE9JEhMKC2JlbGllZl90aW1lGAEgASgEEhQKDHJlcXVl",
            "c3RfdGltZRgCIAEoBBIQCghhY3Rvcl9pZBgDIAEoBRINCgVwb3NfeBgEIAEo",
            "AhINCgVwb3NfeRgFIAEoAhINCgVwb3NfehgGIAEoAiKBAQoVR3BiX1dheXBv",
            "aW50X092ZXJyaWRlEhMKC2JlbGllZl90aW1lGAEgASgEEhQKDHJlcXVlc3Rf",
            "dGltZRgCIAEoBBIQCghhY3Rvcl9pZBgDIAEoBRINCgVwb3NfeBgEIAEoAhIN",
            "CgVwb3NfeRgFIAEoAhINCgVwb3NfehgGIAEoAiKEAQoSR3BiX1N1cHBseURl",
            "bGl2ZXJ5EhMKC2JlbGllZl90aW1lGAEgASgEEhQKDHJlcXVlc3RfdGltZRgC",
            "IAEoBBIQCghhY3Rvcl9pZBgDIAEoBRIOCgZncmVlZHkYBCABKAgSCwoDaWRz",
            "GAUgAygFEhQKDG11bHRpcGxpY2l0eRgGIAMoBSJ/CgtHcGJfVmlsbGFnZRIT",
            "CgtiZWxpZWZfdGltZRgBIAEoBBIKCgJpZBgCIAEoBRIpCgVjZWxscxgDIAMo",
            "CzIaLmF1dG9ub215X21zZy5HcGJfR3JpZENlbGwSEAoIc3VwcGxpZXMYBCAB",
            "KAISEgoKY2FzdWFsdGllcxgFIAEoAiIoCgxHcGJfR3JpZENlbGwSCwoDcm93",
            "GAEgASgFEgsKA2NvbBgCIAEoBSKJAwoJR3BiX0FjdG9yEhMKC2JlbGllZl90",
            "aW1lGAEgASgEEhEKCXVuaXF1ZV9pZBgCIAEoBRITCgthZmZpbGlhdGlvbhgD",
            "IAEoBRIMCgR0eXBlGAQgASgFEhAKCGlzX2FsaXZlGAUgASgIEhkKEW51bV9z",
            "dG9yYWdlX3Nsb3RzGAYgASgNEh0KFW51bV9jYXN1YWx0aWVzX3N0b3JlZBgH",
            "IAEoDRIbChNudW1fc3VwcGxpZXNfc3RvcmVkGAggASgNEhwKFG51bV9jaXZp",
            "bGlhbnNfc3RvcmVkGAkgASgNEhUKDWlzX3dlYXBvbml6ZWQYCiABKAgSEgoK",
            "aGFzX2phbW1lchgLIAEoCBIWCg5mdWVsX3JlbWFpbmluZxgMIAEoAhINCgVw",
            "b3NfeBgNIAEoAhINCgVwb3NfeRgOIAEoAhINCgVwb3NfehgPIAEoAhISCgp2",
            "ZWxvY2l0eV94GBAgASgCEhIKCnZlbG9jaXR5X3kYESABKAISEgoKdmVsb2Np",
            "dHlfehgSIAEoAiJWCgpHcGJfQ3VzdG9tEhMKC2N1c3RvbV90eXBlGAEgASgF",
            "EhAKCGFjdG9yX2lkGAIgASgFEhMKC2JlbGllZl90aW1lGAMgASgEEgwKBGRh",
            "dGEYBCABKAwiaAoIR3BiX0Jhc2USEwoLYmVsaWVmX3RpbWUYASABKAQSCgoC",
            "aWQYAiABKAUSKQoFY2VsbHMYAyADKAsyGi5hdXRvbm9teV9tc2cuR3BiX0dy",
            "aWRDZWxsEhAKCHN1cHBsaWVzGAQgASgCIlsKC0dwYl9UZXJyYWluEhMKC2Jl",
            "bGllZl90aW1lGAEgASgEEgwKBHR5cGUYAiABKAUSKQoFY2VsbHMYAyADKAsy",
            "Gi5hdXRvbm9teV9tc2cuR3BiX0dyaWRDZWxsImAKEEdwYl9Nb2RlX0NvbW1h",
            "bmQSEwoLYmVsaWVmX3RpbWUYASABKAQSFAoMcmVxdWVzdF90aW1lGAIgASgE",
            "EhAKCGFjdG9yX2lkGAMgASgFEg8KB21vZGVfaWQYBCABKAUihwEKDEdwYl9X",
            "YXlwb2ludBITCgtiZWxpZWZfdGltZRgBIAEoBBIUCgxyZXF1ZXN0X3RpbWUY",
            "AiABKAQSEAoIYWN0b3JfaWQYAyABKAUSDQoFcG9zX3gYBCABKAISDQoFcG9z",
            "X3kYBSABKAISDQoFcG9zX3oYBiABKAISDQoFc3BlZWQYByABKAIiLQoIR3Bi",
            "X1RpbWUSEwoLYmVsaWVmX3RpbWUYASABKAQSDAoEdGltZRgCIAEoBCJgCgxH",
            "cGJfUm9hZENlbGwSEwoLYmVsaWVmX3RpbWUYASABKAQSEQoJaXNSb2FkRW5k",
            "GAIgASgIEigKBGNlbGwYAyABKAsyGi5hdXRvbm9teV9tc2cuR3BiX0dyaWRD",
            "ZWxsImYKEkdwYl9TaW5nbGVXYXlwb2ludBIJCgF4GAEgASgCEgkKAXkYAiAB",
            "KAISCQoBehgDIAEoAhINCgVzcGVlZBgEIAEoAhIPCgdoZWFkaW5nGAUgASgC",
            "Eg8KB3Zpc2l0ZWQYBiABKAgihAEKEEdwYl9XYXlwb2ludFBhdGgSEwoLYmVs",
            "aWVmX3RpbWUYASABKAQSFAoMcmVxdWVzdF90aW1lGAIgASgEEhAKCGFjdG9y",
            "X2lkGAMgASgFEjMKCXdheXBvaW50cxgEIAMoCzIgLmF1dG9ub215X21zZy5H",
            "cGJfU2luZ2xlV2F5cG9pbnQieQoUR3BiX0Nhc3VhbHR5RGVsaXZlcnkSEwoL",
            "YmVsaWVmX3RpbWUYASABKAQSFAoMcmVxdWVzdF90aW1lGAIgASgEEhAKCGFj",
            "dG9yX2lkGAMgASgFEg4KBmdyZWVkeRgEIAEoCBIUCgxtdWx0aXBsaWNpdHkY",
            "BSABKAUidQoQR3BiX1N1cHBseVBpY2t1cBITCgtiZWxpZWZfdGltZRgBIAEo",
            "BBIUCgxyZXF1ZXN0X3RpbWUYAiABKAQSEAoIYWN0b3JfaWQYAyABKAUSDgoG",
            "Z3JlZWR5GAQgASgIEhQKDG11bHRpcGxpY2l0eRgFIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_GridSpec), global::AutonomyMsg.Gpb_GridSpec.Parser, new[]{ "BeliefTime", "Height", "Width", "GridOriginX", "GridOriginZ", "GridToWorldScale" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_CasualtyPickup), global::AutonomyMsg.Gpb_CasualtyPickup.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "Greedy", "Ids", "Multiplicity" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_NGOSite), global::AutonomyMsg.Gpb_NGOSite.Parser, new[]{ "BeliefTime", "Id", "Cells", "Supplies", "Casualties", "Civilians" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_SPOI), global::AutonomyMsg.Gpb_SPOI.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Waypoint_Override), global::AutonomyMsg.Gpb_Waypoint_Override.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_SupplyDelivery), global::AutonomyMsg.Gpb_SupplyDelivery.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "Greedy", "Ids", "Multiplicity" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Village), global::AutonomyMsg.Gpb_Village.Parser, new[]{ "BeliefTime", "Id", "Cells", "Supplies", "Casualties" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_GridCell), global::AutonomyMsg.Gpb_GridCell.Parser, new[]{ "Row", "Col" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Actor), global::AutonomyMsg.Gpb_Actor.Parser, new[]{ "BeliefTime", "UniqueId", "Affiliation", "Type", "IsAlive", "NumStorageSlots", "NumCasualtiesStored", "NumSuppliesStored", "NumCiviliansStored", "IsWeaponized", "HasJammer", "FuelRemaining", "PosX", "PosY", "PosZ", "VelocityX", "VelocityY", "VelocityZ" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Custom), global::AutonomyMsg.Gpb_Custom.Parser, new[]{ "CustomType", "ActorId", "BeliefTime", "Data" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Base), global::AutonomyMsg.Gpb_Base.Parser, new[]{ "BeliefTime", "Id", "Cells", "Supplies" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Terrain), global::AutonomyMsg.Gpb_Terrain.Parser, new[]{ "BeliefTime", "Type", "Cells" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Mode_Command), global::AutonomyMsg.Gpb_Mode_Command.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "ModeId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Waypoint), global::AutonomyMsg.Gpb_Waypoint.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "PosX", "PosY", "PosZ", "Speed" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_Time), global::AutonomyMsg.Gpb_Time.Parser, new[]{ "BeliefTime", "Time" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_RoadCell), global::AutonomyMsg.Gpb_RoadCell.Parser, new[]{ "BeliefTime", "IsRoadEnd", "Cell" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_SingleWaypoint), global::AutonomyMsg.Gpb_SingleWaypoint.Parser, new[]{ "X", "Y", "Z", "Speed", "Heading", "Visited" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_WaypointPath), global::AutonomyMsg.Gpb_WaypointPath.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "Waypoints" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_CasualtyDelivery), global::AutonomyMsg.Gpb_CasualtyDelivery.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "Greedy", "Multiplicity" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::AutonomyMsg.Gpb_SupplyPickup), global::AutonomyMsg.Gpb_SupplyPickup.Parser, new[]{ "BeliefTime", "RequestTime", "ActorId", "Greedy", "Multiplicity" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_GridSpec : pb::IMessage<Gpb_GridSpec> {
    private static readonly pb::MessageParser<Gpb_GridSpec> _parser = new pb::MessageParser<Gpb_GridSpec>(() => new Gpb_GridSpec());
    public static pb::MessageParser<Gpb_GridSpec> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_GridSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_GridSpec(Gpb_GridSpec other) : this() {
      beliefTime_ = other.beliefTime_;
      height_ = other.height_;
      width_ = other.width_;
      gridOriginX_ = other.gridOriginX_;
      gridOriginZ_ = other.gridOriginZ_;
      gridToWorldScale_ = other.gridToWorldScale_;
    }

    public Gpb_GridSpec Clone() {
      return new Gpb_GridSpec(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "gridOrigin_x" field.</summary>
    public const int GridOriginXFieldNumber = 4;
    private float gridOriginX_;
    public float GridOriginX {
      get { return gridOriginX_; }
      set {
        gridOriginX_ = value;
      }
    }

    /// <summary>Field number for the "gridOrigin_z" field.</summary>
    public const int GridOriginZFieldNumber = 5;
    private float gridOriginZ_;
    public float GridOriginZ {
      get { return gridOriginZ_; }
      set {
        gridOriginZ_ = value;
      }
    }

    /// <summary>Field number for the "gridToWorldScale" field.</summary>
    public const int GridToWorldScaleFieldNumber = 6;
    private float gridToWorldScale_;
    public float GridToWorldScale {
      get { return gridToWorldScale_; }
      set {
        gridToWorldScale_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_GridSpec);
    }

    public bool Equals(Gpb_GridSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (GridOriginX != other.GridOriginX) return false;
      if (GridOriginZ != other.GridOriginZ) return false;
      if (GridToWorldScale != other.GridToWorldScale) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (GridOriginX != 0F) hash ^= GridOriginX.GetHashCode();
      if (GridOriginZ != 0F) hash ^= GridOriginZ.GetHashCode();
      if (GridToWorldScale != 0F) hash ^= GridToWorldScale.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (GridOriginX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(GridOriginX);
      }
      if (GridOriginZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(GridOriginZ);
      }
      if (GridToWorldScale != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(GridToWorldScale);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (GridOriginX != 0F) {
        size += 1 + 4;
      }
      if (GridOriginZ != 0F) {
        size += 1 + 4;
      }
      if (GridToWorldScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_GridSpec other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.GridOriginX != 0F) {
        GridOriginX = other.GridOriginX;
      }
      if (other.GridOriginZ != 0F) {
        GridOriginZ = other.GridOriginZ;
      }
      if (other.GridToWorldScale != 0F) {
        GridToWorldScale = other.GridToWorldScale;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 37: {
            GridOriginX = input.ReadFloat();
            break;
          }
          case 45: {
            GridOriginZ = input.ReadFloat();
            break;
          }
          case 53: {
            GridToWorldScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_CasualtyPickup : pb::IMessage<Gpb_CasualtyPickup> {
    private static readonly pb::MessageParser<Gpb_CasualtyPickup> _parser = new pb::MessageParser<Gpb_CasualtyPickup>(() => new Gpb_CasualtyPickup());
    public static pb::MessageParser<Gpb_CasualtyPickup> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_CasualtyPickup() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_CasualtyPickup(Gpb_CasualtyPickup other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      greedy_ = other.greedy_;
      ids_ = other.ids_.Clone();
      multiplicity_ = other.multiplicity_.Clone();
    }

    public Gpb_CasualtyPickup Clone() {
      return new Gpb_CasualtyPickup(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "greedy" field.</summary>
    public const int GreedyFieldNumber = 4;
    private bool greedy_;
    public bool Greedy {
      get { return greedy_; }
      set {
        greedy_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "multiplicity" field.</summary>
    public const int MultiplicityFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_multiplicity_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> multiplicity_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Multiplicity {
      get { return multiplicity_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_CasualtyPickup);
    }

    public bool Equals(Gpb_CasualtyPickup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (Greedy != other.Greedy) return false;
      if(!ids_.Equals(other.ids_)) return false;
      if(!multiplicity_.Equals(other.multiplicity_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (Greedy != false) hash ^= Greedy.GetHashCode();
      hash ^= ids_.GetHashCode();
      hash ^= multiplicity_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (Greedy != false) {
        output.WriteRawTag(32);
        output.WriteBool(Greedy);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      multiplicity_.WriteTo(output, _repeated_multiplicity_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (Greedy != false) {
        size += 1 + 1;
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += multiplicity_.CalculateSize(_repeated_multiplicity_codec);
      return size;
    }

    public void MergeFrom(Gpb_CasualtyPickup other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.Greedy != false) {
        Greedy = other.Greedy;
      }
      ids_.Add(other.ids_);
      multiplicity_.Add(other.multiplicity_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 32: {
            Greedy = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 50:
          case 48: {
            multiplicity_.AddEntriesFrom(input, _repeated_multiplicity_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_NGOSite : pb::IMessage<Gpb_NGOSite> {
    private static readonly pb::MessageParser<Gpb_NGOSite> _parser = new pb::MessageParser<Gpb_NGOSite>(() => new Gpb_NGOSite());
    public static pb::MessageParser<Gpb_NGOSite> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_NGOSite() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_NGOSite(Gpb_NGOSite other) : this() {
      beliefTime_ = other.beliefTime_;
      id_ = other.id_;
      cells_ = other.cells_.Clone();
      supplies_ = other.supplies_;
      casualties_ = other.casualties_;
      civilians_ = other.civilians_;
    }

    public Gpb_NGOSite Clone() {
      return new Gpb_NGOSite(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cells" field.</summary>
    public const int CellsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AutonomyMsg.Gpb_GridCell> _repeated_cells_codec
        = pb::FieldCodec.ForMessage(26, global::AutonomyMsg.Gpb_GridCell.Parser);
    private readonly pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> cells_ = new pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell>();
    public pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> Cells {
      get { return cells_; }
    }

    /// <summary>Field number for the "supplies" field.</summary>
    public const int SuppliesFieldNumber = 4;
    private float supplies_;
    public float Supplies {
      get { return supplies_; }
      set {
        supplies_ = value;
      }
    }

    /// <summary>Field number for the "casualties" field.</summary>
    public const int CasualtiesFieldNumber = 5;
    private float casualties_;
    public float Casualties {
      get { return casualties_; }
      set {
        casualties_ = value;
      }
    }

    /// <summary>Field number for the "civilians" field.</summary>
    public const int CiviliansFieldNumber = 6;
    private float civilians_;
    public float Civilians {
      get { return civilians_; }
      set {
        civilians_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_NGOSite);
    }

    public bool Equals(Gpb_NGOSite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (Id != other.Id) return false;
      if(!cells_.Equals(other.cells_)) return false;
      if (Supplies != other.Supplies) return false;
      if (Casualties != other.Casualties) return false;
      if (Civilians != other.Civilians) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= cells_.GetHashCode();
      if (Supplies != 0F) hash ^= Supplies.GetHashCode();
      if (Casualties != 0F) hash ^= Casualties.GetHashCode();
      if (Civilians != 0F) hash ^= Civilians.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      cells_.WriteTo(output, _repeated_cells_codec);
      if (Supplies != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Supplies);
      }
      if (Casualties != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Casualties);
      }
      if (Civilians != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Civilians);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += cells_.CalculateSize(_repeated_cells_codec);
      if (Supplies != 0F) {
        size += 1 + 4;
      }
      if (Casualties != 0F) {
        size += 1 + 4;
      }
      if (Civilians != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_NGOSite other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      cells_.Add(other.cells_);
      if (other.Supplies != 0F) {
        Supplies = other.Supplies;
      }
      if (other.Casualties != 0F) {
        Casualties = other.Casualties;
      }
      if (other.Civilians != 0F) {
        Civilians = other.Civilians;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
          case 37: {
            Supplies = input.ReadFloat();
            break;
          }
          case 45: {
            Casualties = input.ReadFloat();
            break;
          }
          case 53: {
            Civilians = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_SPOI : pb::IMessage<Gpb_SPOI> {
    private static readonly pb::MessageParser<Gpb_SPOI> _parser = new pb::MessageParser<Gpb_SPOI>(() => new Gpb_SPOI());
    public static pb::MessageParser<Gpb_SPOI> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_SPOI() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_SPOI(Gpb_SPOI other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
    }

    public Gpb_SPOI Clone() {
      return new Gpb_SPOI(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 4;
    private float posX_;
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 5;
    private float posY_;
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 6;
    private float posZ_;
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_SPOI);
    }

    public bool Equals(Gpb_SPOI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (PosX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosZ);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_SPOI other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 37: {
            PosX = input.ReadFloat();
            break;
          }
          case 45: {
            PosY = input.ReadFloat();
            break;
          }
          case 53: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Waypoint_Override : pb::IMessage<Gpb_Waypoint_Override> {
    private static readonly pb::MessageParser<Gpb_Waypoint_Override> _parser = new pb::MessageParser<Gpb_Waypoint_Override>(() => new Gpb_Waypoint_Override());
    public static pb::MessageParser<Gpb_Waypoint_Override> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Waypoint_Override() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Waypoint_Override(Gpb_Waypoint_Override other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
    }

    public Gpb_Waypoint_Override Clone() {
      return new Gpb_Waypoint_Override(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 4;
    private float posX_;
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 5;
    private float posY_;
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 6;
    private float posZ_;
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Waypoint_Override);
    }

    public bool Equals(Gpb_Waypoint_Override other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (PosX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosZ);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_Waypoint_Override other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 37: {
            PosX = input.ReadFloat();
            break;
          }
          case 45: {
            PosY = input.ReadFloat();
            break;
          }
          case 53: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_SupplyDelivery : pb::IMessage<Gpb_SupplyDelivery> {
    private static readonly pb::MessageParser<Gpb_SupplyDelivery> _parser = new pb::MessageParser<Gpb_SupplyDelivery>(() => new Gpb_SupplyDelivery());
    public static pb::MessageParser<Gpb_SupplyDelivery> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_SupplyDelivery() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_SupplyDelivery(Gpb_SupplyDelivery other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      greedy_ = other.greedy_;
      ids_ = other.ids_.Clone();
      multiplicity_ = other.multiplicity_.Clone();
    }

    public Gpb_SupplyDelivery Clone() {
      return new Gpb_SupplyDelivery(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "greedy" field.</summary>
    public const int GreedyFieldNumber = 4;
    private bool greedy_;
    public bool Greedy {
      get { return greedy_; }
      set {
        greedy_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_ids_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> ids_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "multiplicity" field.</summary>
    public const int MultiplicityFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_multiplicity_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> multiplicity_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> Multiplicity {
      get { return multiplicity_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_SupplyDelivery);
    }

    public bool Equals(Gpb_SupplyDelivery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (Greedy != other.Greedy) return false;
      if(!ids_.Equals(other.ids_)) return false;
      if(!multiplicity_.Equals(other.multiplicity_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (Greedy != false) hash ^= Greedy.GetHashCode();
      hash ^= ids_.GetHashCode();
      hash ^= multiplicity_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (Greedy != false) {
        output.WriteRawTag(32);
        output.WriteBool(Greedy);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
      multiplicity_.WriteTo(output, _repeated_multiplicity_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (Greedy != false) {
        size += 1 + 1;
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      size += multiplicity_.CalculateSize(_repeated_multiplicity_codec);
      return size;
    }

    public void MergeFrom(Gpb_SupplyDelivery other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.Greedy != false) {
        Greedy = other.Greedy;
      }
      ids_.Add(other.ids_);
      multiplicity_.Add(other.multiplicity_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 32: {
            Greedy = input.ReadBool();
            break;
          }
          case 42:
          case 40: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
          case 50:
          case 48: {
            multiplicity_.AddEntriesFrom(input, _repeated_multiplicity_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Village : pb::IMessage<Gpb_Village> {
    private static readonly pb::MessageParser<Gpb_Village> _parser = new pb::MessageParser<Gpb_Village>(() => new Gpb_Village());
    public static pb::MessageParser<Gpb_Village> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Village() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Village(Gpb_Village other) : this() {
      beliefTime_ = other.beliefTime_;
      id_ = other.id_;
      cells_ = other.cells_.Clone();
      supplies_ = other.supplies_;
      casualties_ = other.casualties_;
    }

    public Gpb_Village Clone() {
      return new Gpb_Village(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cells" field.</summary>
    public const int CellsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AutonomyMsg.Gpb_GridCell> _repeated_cells_codec
        = pb::FieldCodec.ForMessage(26, global::AutonomyMsg.Gpb_GridCell.Parser);
    private readonly pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> cells_ = new pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell>();
    public pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> Cells {
      get { return cells_; }
    }

    /// <summary>Field number for the "supplies" field.</summary>
    public const int SuppliesFieldNumber = 4;
    private float supplies_;
    public float Supplies {
      get { return supplies_; }
      set {
        supplies_ = value;
      }
    }

    /// <summary>Field number for the "casualties" field.</summary>
    public const int CasualtiesFieldNumber = 5;
    private float casualties_;
    public float Casualties {
      get { return casualties_; }
      set {
        casualties_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Village);
    }

    public bool Equals(Gpb_Village other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (Id != other.Id) return false;
      if(!cells_.Equals(other.cells_)) return false;
      if (Supplies != other.Supplies) return false;
      if (Casualties != other.Casualties) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= cells_.GetHashCode();
      if (Supplies != 0F) hash ^= Supplies.GetHashCode();
      if (Casualties != 0F) hash ^= Casualties.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      cells_.WriteTo(output, _repeated_cells_codec);
      if (Supplies != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Supplies);
      }
      if (Casualties != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Casualties);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += cells_.CalculateSize(_repeated_cells_codec);
      if (Supplies != 0F) {
        size += 1 + 4;
      }
      if (Casualties != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_Village other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      cells_.Add(other.cells_);
      if (other.Supplies != 0F) {
        Supplies = other.Supplies;
      }
      if (other.Casualties != 0F) {
        Casualties = other.Casualties;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
          case 37: {
            Supplies = input.ReadFloat();
            break;
          }
          case 45: {
            Casualties = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_GridCell : pb::IMessage<Gpb_GridCell> {
    private static readonly pb::MessageParser<Gpb_GridCell> _parser = new pb::MessageParser<Gpb_GridCell>(() => new Gpb_GridCell());
    public static pb::MessageParser<Gpb_GridCell> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_GridCell() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_GridCell(Gpb_GridCell other) : this() {
      row_ = other.row_;
      col_ = other.col_;
    }

    public Gpb_GridCell Clone() {
      return new Gpb_GridCell(this);
    }

    /// <summary>Field number for the "row" field.</summary>
    public const int RowFieldNumber = 1;
    private int row_;
    public int Row {
      get { return row_; }
      set {
        row_ = value;
      }
    }

    /// <summary>Field number for the "col" field.</summary>
    public const int ColFieldNumber = 2;
    private int col_;
    public int Col {
      get { return col_; }
      set {
        col_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_GridCell);
    }

    public bool Equals(Gpb_GridCell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Row != other.Row) return false;
      if (Col != other.Col) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Row != 0) hash ^= Row.GetHashCode();
      if (Col != 0) hash ^= Col.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Row != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Row);
      }
      if (Col != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Col);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Row != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Row);
      }
      if (Col != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Col);
      }
      return size;
    }

    public void MergeFrom(Gpb_GridCell other) {
      if (other == null) {
        return;
      }
      if (other.Row != 0) {
        Row = other.Row;
      }
      if (other.Col != 0) {
        Col = other.Col;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Row = input.ReadInt32();
            break;
          }
          case 16: {
            Col = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Actor : pb::IMessage<Gpb_Actor> {
    private static readonly pb::MessageParser<Gpb_Actor> _parser = new pb::MessageParser<Gpb_Actor>(() => new Gpb_Actor());
    public static pb::MessageParser<Gpb_Actor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Actor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Actor(Gpb_Actor other) : this() {
      beliefTime_ = other.beliefTime_;
      uniqueId_ = other.uniqueId_;
      affiliation_ = other.affiliation_;
      type_ = other.type_;
      isAlive_ = other.isAlive_;
      numStorageSlots_ = other.numStorageSlots_;
      numCasualtiesStored_ = other.numCasualtiesStored_;
      numSuppliesStored_ = other.numSuppliesStored_;
      numCiviliansStored_ = other.numCiviliansStored_;
      isWeaponized_ = other.isWeaponized_;
      hasJammer_ = other.hasJammer_;
      fuelRemaining_ = other.fuelRemaining_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      velocityX_ = other.velocityX_;
      velocityY_ = other.velocityY_;
      velocityZ_ = other.velocityZ_;
    }

    public Gpb_Actor Clone() {
      return new Gpb_Actor(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 2;
    private int uniqueId_;
    public int UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "affiliation" field.</summary>
    public const int AffiliationFieldNumber = 3;
    private int affiliation_;
    public int Affiliation {
      get { return affiliation_; }
      set {
        affiliation_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "is_alive" field.</summary>
    public const int IsAliveFieldNumber = 5;
    private bool isAlive_;
    public bool IsAlive {
      get { return isAlive_; }
      set {
        isAlive_ = value;
      }
    }

    /// <summary>Field number for the "num_storage_slots" field.</summary>
    public const int NumStorageSlotsFieldNumber = 6;
    private uint numStorageSlots_;
    public uint NumStorageSlots {
      get { return numStorageSlots_; }
      set {
        numStorageSlots_ = value;
      }
    }

    /// <summary>Field number for the "num_casualties_stored" field.</summary>
    public const int NumCasualtiesStoredFieldNumber = 7;
    private uint numCasualtiesStored_;
    public uint NumCasualtiesStored {
      get { return numCasualtiesStored_; }
      set {
        numCasualtiesStored_ = value;
      }
    }

    /// <summary>Field number for the "num_supplies_stored" field.</summary>
    public const int NumSuppliesStoredFieldNumber = 8;
    private uint numSuppliesStored_;
    public uint NumSuppliesStored {
      get { return numSuppliesStored_; }
      set {
        numSuppliesStored_ = value;
      }
    }

    /// <summary>Field number for the "num_civilians_stored" field.</summary>
    public const int NumCiviliansStoredFieldNumber = 9;
    private uint numCiviliansStored_;
    public uint NumCiviliansStored {
      get { return numCiviliansStored_; }
      set {
        numCiviliansStored_ = value;
      }
    }

    /// <summary>Field number for the "is_weaponized" field.</summary>
    public const int IsWeaponizedFieldNumber = 10;
    private bool isWeaponized_;
    public bool IsWeaponized {
      get { return isWeaponized_; }
      set {
        isWeaponized_ = value;
      }
    }

    /// <summary>Field number for the "has_jammer" field.</summary>
    public const int HasJammerFieldNumber = 11;
    private bool hasJammer_;
    public bool HasJammer {
      get { return hasJammer_; }
      set {
        hasJammer_ = value;
      }
    }

    /// <summary>Field number for the "fuel_remaining" field.</summary>
    public const int FuelRemainingFieldNumber = 12;
    private float fuelRemaining_;
    public float FuelRemaining {
      get { return fuelRemaining_; }
      set {
        fuelRemaining_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 13;
    private float posX_;
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 14;
    private float posY_;
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 15;
    private float posZ_;
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "velocity_x" field.</summary>
    public const int VelocityXFieldNumber = 16;
    private float velocityX_;
    public float VelocityX {
      get { return velocityX_; }
      set {
        velocityX_ = value;
      }
    }

    /// <summary>Field number for the "velocity_y" field.</summary>
    public const int VelocityYFieldNumber = 17;
    private float velocityY_;
    public float VelocityY {
      get { return velocityY_; }
      set {
        velocityY_ = value;
      }
    }

    /// <summary>Field number for the "velocity_z" field.</summary>
    public const int VelocityZFieldNumber = 18;
    private float velocityZ_;
    public float VelocityZ {
      get { return velocityZ_; }
      set {
        velocityZ_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Actor);
    }

    public bool Equals(Gpb_Actor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (UniqueId != other.UniqueId) return false;
      if (Affiliation != other.Affiliation) return false;
      if (Type != other.Type) return false;
      if (IsAlive != other.IsAlive) return false;
      if (NumStorageSlots != other.NumStorageSlots) return false;
      if (NumCasualtiesStored != other.NumCasualtiesStored) return false;
      if (NumSuppliesStored != other.NumSuppliesStored) return false;
      if (NumCiviliansStored != other.NumCiviliansStored) return false;
      if (IsWeaponized != other.IsWeaponized) return false;
      if (HasJammer != other.HasJammer) return false;
      if (FuelRemaining != other.FuelRemaining) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (VelocityX != other.VelocityX) return false;
      if (VelocityY != other.VelocityY) return false;
      if (VelocityZ != other.VelocityZ) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (UniqueId != 0) hash ^= UniqueId.GetHashCode();
      if (Affiliation != 0) hash ^= Affiliation.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (IsAlive != false) hash ^= IsAlive.GetHashCode();
      if (NumStorageSlots != 0) hash ^= NumStorageSlots.GetHashCode();
      if (NumCasualtiesStored != 0) hash ^= NumCasualtiesStored.GetHashCode();
      if (NumSuppliesStored != 0) hash ^= NumSuppliesStored.GetHashCode();
      if (NumCiviliansStored != 0) hash ^= NumCiviliansStored.GetHashCode();
      if (IsWeaponized != false) hash ^= IsWeaponized.GetHashCode();
      if (HasJammer != false) hash ^= HasJammer.GetHashCode();
      if (FuelRemaining != 0F) hash ^= FuelRemaining.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      if (VelocityX != 0F) hash ^= VelocityX.GetHashCode();
      if (VelocityY != 0F) hash ^= VelocityY.GetHashCode();
      if (VelocityZ != 0F) hash ^= VelocityZ.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (UniqueId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UniqueId);
      }
      if (Affiliation != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Affiliation);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (IsAlive != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsAlive);
      }
      if (NumStorageSlots != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(NumStorageSlots);
      }
      if (NumCasualtiesStored != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NumCasualtiesStored);
      }
      if (NumSuppliesStored != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(NumSuppliesStored);
      }
      if (NumCiviliansStored != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NumCiviliansStored);
      }
      if (IsWeaponized != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsWeaponized);
      }
      if (HasJammer != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasJammer);
      }
      if (FuelRemaining != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(FuelRemaining);
      }
      if (PosX != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PosZ);
      }
      if (VelocityX != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(VelocityX);
      }
      if (VelocityY != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(VelocityY);
      }
      if (VelocityZ != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(VelocityZ);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (UniqueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueId);
      }
      if (Affiliation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Affiliation);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (IsAlive != false) {
        size += 1 + 1;
      }
      if (NumStorageSlots != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumStorageSlots);
      }
      if (NumCasualtiesStored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCasualtiesStored);
      }
      if (NumSuppliesStored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumSuppliesStored);
      }
      if (NumCiviliansStored != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumCiviliansStored);
      }
      if (IsWeaponized != false) {
        size += 1 + 1;
      }
      if (HasJammer != false) {
        size += 1 + 1;
      }
      if (FuelRemaining != 0F) {
        size += 1 + 4;
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (VelocityX != 0F) {
        size += 2 + 4;
      }
      if (VelocityY != 0F) {
        size += 2 + 4;
      }
      if (VelocityZ != 0F) {
        size += 2 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_Actor other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.UniqueId != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Affiliation != 0) {
        Affiliation = other.Affiliation;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.IsAlive != false) {
        IsAlive = other.IsAlive;
      }
      if (other.NumStorageSlots != 0) {
        NumStorageSlots = other.NumStorageSlots;
      }
      if (other.NumCasualtiesStored != 0) {
        NumCasualtiesStored = other.NumCasualtiesStored;
      }
      if (other.NumSuppliesStored != 0) {
        NumSuppliesStored = other.NumSuppliesStored;
      }
      if (other.NumCiviliansStored != 0) {
        NumCiviliansStored = other.NumCiviliansStored;
      }
      if (other.IsWeaponized != false) {
        IsWeaponized = other.IsWeaponized;
      }
      if (other.HasJammer != false) {
        HasJammer = other.HasJammer;
      }
      if (other.FuelRemaining != 0F) {
        FuelRemaining = other.FuelRemaining;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.VelocityX != 0F) {
        VelocityX = other.VelocityX;
      }
      if (other.VelocityY != 0F) {
        VelocityY = other.VelocityY;
      }
      if (other.VelocityZ != 0F) {
        VelocityZ = other.VelocityZ;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 24: {
            Affiliation = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            IsAlive = input.ReadBool();
            break;
          }
          case 48: {
            NumStorageSlots = input.ReadUInt32();
            break;
          }
          case 56: {
            NumCasualtiesStored = input.ReadUInt32();
            break;
          }
          case 64: {
            NumSuppliesStored = input.ReadUInt32();
            break;
          }
          case 72: {
            NumCiviliansStored = input.ReadUInt32();
            break;
          }
          case 80: {
            IsWeaponized = input.ReadBool();
            break;
          }
          case 88: {
            HasJammer = input.ReadBool();
            break;
          }
          case 101: {
            FuelRemaining = input.ReadFloat();
            break;
          }
          case 109: {
            PosX = input.ReadFloat();
            break;
          }
          case 117: {
            PosY = input.ReadFloat();
            break;
          }
          case 125: {
            PosZ = input.ReadFloat();
            break;
          }
          case 133: {
            VelocityX = input.ReadFloat();
            break;
          }
          case 141: {
            VelocityY = input.ReadFloat();
            break;
          }
          case 149: {
            VelocityZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Custom : pb::IMessage<Gpb_Custom> {
    private static readonly pb::MessageParser<Gpb_Custom> _parser = new pb::MessageParser<Gpb_Custom>(() => new Gpb_Custom());
    public static pb::MessageParser<Gpb_Custom> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Custom() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Custom(Gpb_Custom other) : this() {
      customType_ = other.customType_;
      actorId_ = other.actorId_;
      beliefTime_ = other.beliefTime_;
      data_ = other.data_;
    }

    public Gpb_Custom Clone() {
      return new Gpb_Custom(this);
    }

    /// <summary>Field number for the "custom_type" field.</summary>
    public const int CustomTypeFieldNumber = 1;
    private int customType_;
    public int CustomType {
      get { return customType_; }
      set {
        customType_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 2;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 3;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Custom);
    }

    public bool Equals(Gpb_Custom other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CustomType != other.CustomType) return false;
      if (ActorId != other.ActorId) return false;
      if (BeliefTime != other.BeliefTime) return false;
      if (Data != other.Data) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (CustomType != 0) hash ^= CustomType.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CustomType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CustomType);
      }
      if (ActorId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ActorId);
      }
      if (BeliefTime != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(BeliefTime);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CustomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomType);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    public void MergeFrom(Gpb_Custom other) {
      if (other == null) {
        return;
      }
      if (other.CustomType != 0) {
        CustomType = other.CustomType;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CustomType = input.ReadInt32();
            break;
          }
          case 16: {
            ActorId = input.ReadInt32();
            break;
          }
          case 24: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Base : pb::IMessage<Gpb_Base> {
    private static readonly pb::MessageParser<Gpb_Base> _parser = new pb::MessageParser<Gpb_Base>(() => new Gpb_Base());
    public static pb::MessageParser<Gpb_Base> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Base() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Base(Gpb_Base other) : this() {
      beliefTime_ = other.beliefTime_;
      id_ = other.id_;
      cells_ = other.cells_.Clone();
      supplies_ = other.supplies_;
    }

    public Gpb_Base Clone() {
      return new Gpb_Base(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private int id_;
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "cells" field.</summary>
    public const int CellsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AutonomyMsg.Gpb_GridCell> _repeated_cells_codec
        = pb::FieldCodec.ForMessage(26, global::AutonomyMsg.Gpb_GridCell.Parser);
    private readonly pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> cells_ = new pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell>();
    public pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> Cells {
      get { return cells_; }
    }

    /// <summary>Field number for the "supplies" field.</summary>
    public const int SuppliesFieldNumber = 4;
    private float supplies_;
    public float Supplies {
      get { return supplies_; }
      set {
        supplies_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Base);
    }

    public bool Equals(Gpb_Base other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (Id != other.Id) return false;
      if(!cells_.Equals(other.cells_)) return false;
      if (Supplies != other.Supplies) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= cells_.GetHashCode();
      if (Supplies != 0F) hash ^= Supplies.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Id);
      }
      cells_.WriteTo(output, _repeated_cells_codec);
      if (Supplies != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Supplies);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += cells_.CalculateSize(_repeated_cells_codec);
      if (Supplies != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_Base other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      cells_.Add(other.cells_);
      if (other.Supplies != 0F) {
        Supplies = other.Supplies;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
          case 37: {
            Supplies = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Terrain : pb::IMessage<Gpb_Terrain> {
    private static readonly pb::MessageParser<Gpb_Terrain> _parser = new pb::MessageParser<Gpb_Terrain>(() => new Gpb_Terrain());
    public static pb::MessageParser<Gpb_Terrain> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[11]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Terrain() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Terrain(Gpb_Terrain other) : this() {
      beliefTime_ = other.beliefTime_;
      type_ = other.type_;
      cells_ = other.cells_.Clone();
    }

    public Gpb_Terrain Clone() {
      return new Gpb_Terrain(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "cells" field.</summary>
    public const int CellsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AutonomyMsg.Gpb_GridCell> _repeated_cells_codec
        = pb::FieldCodec.ForMessage(26, global::AutonomyMsg.Gpb_GridCell.Parser);
    private readonly pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> cells_ = new pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell>();
    public pbc::RepeatedField<global::AutonomyMsg.Gpb_GridCell> Cells {
      get { return cells_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Terrain);
    }

    public bool Equals(Gpb_Terrain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (Type != other.Type) return false;
      if(!cells_.Equals(other.cells_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= cells_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      cells_.WriteTo(output, _repeated_cells_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      size += cells_.CalculateSize(_repeated_cells_codec);
      return size;
    }

    public void MergeFrom(Gpb_Terrain other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      cells_.Add(other.cells_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 26: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Mode_Command : pb::IMessage<Gpb_Mode_Command> {
    private static readonly pb::MessageParser<Gpb_Mode_Command> _parser = new pb::MessageParser<Gpb_Mode_Command>(() => new Gpb_Mode_Command());
    public static pb::MessageParser<Gpb_Mode_Command> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[12]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Mode_Command() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Mode_Command(Gpb_Mode_Command other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      modeId_ = other.modeId_;
    }

    public Gpb_Mode_Command Clone() {
      return new Gpb_Mode_Command(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "mode_id" field.</summary>
    public const int ModeIdFieldNumber = 4;
    private int modeId_;
    public int ModeId {
      get { return modeId_; }
      set {
        modeId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Mode_Command);
    }

    public bool Equals(Gpb_Mode_Command other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (ModeId != other.ModeId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (ModeId != 0) hash ^= ModeId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (ModeId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ModeId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (ModeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModeId);
      }
      return size;
    }

    public void MergeFrom(Gpb_Mode_Command other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.ModeId != 0) {
        ModeId = other.ModeId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 32: {
            ModeId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Waypoint : pb::IMessage<Gpb_Waypoint> {
    private static readonly pb::MessageParser<Gpb_Waypoint> _parser = new pb::MessageParser<Gpb_Waypoint>(() => new Gpb_Waypoint());
    public static pb::MessageParser<Gpb_Waypoint> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[13]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Waypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Waypoint(Gpb_Waypoint other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      speed_ = other.speed_;
    }

    public Gpb_Waypoint Clone() {
      return new Gpb_Waypoint(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "pos_x" field.</summary>
    public const int PosXFieldNumber = 4;
    private float posX_;
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "pos_y" field.</summary>
    public const int PosYFieldNumber = 5;
    private float posY_;
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "pos_z" field.</summary>
    public const int PosZFieldNumber = 6;
    private float posZ_;
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 7;
    private float speed_;
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Waypoint);
    }

    public bool Equals(Gpb_Waypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (PosX != other.PosX) return false;
      if (PosY != other.PosY) return false;
      if (PosZ != other.PosZ) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (PosX != 0F) hash ^= PosX.GetHashCode();
      if (PosY != 0F) hash ^= PosY.GetHashCode();
      if (PosZ != 0F) hash ^= PosZ.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (PosX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosZ);
      }
      if (Speed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Speed);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(Gpb_Waypoint other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 37: {
            PosX = input.ReadFloat();
            break;
          }
          case 45: {
            PosY = input.ReadFloat();
            break;
          }
          case 53: {
            PosZ = input.ReadFloat();
            break;
          }
          case 61: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_Time : pb::IMessage<Gpb_Time> {
    private static readonly pb::MessageParser<Gpb_Time> _parser = new pb::MessageParser<Gpb_Time>(() => new Gpb_Time());
    public static pb::MessageParser<Gpb_Time> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[14]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_Time() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_Time(Gpb_Time other) : this() {
      beliefTime_ = other.beliefTime_;
      time_ = other.time_;
    }

    public Gpb_Time Clone() {
      return new Gpb_Time(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 2;
    private ulong time_;
    public ulong Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_Time);
    }

    public bool Equals(Gpb_Time other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (Time != other.Time) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (Time != 0UL) hash ^= Time.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (Time != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Time);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (Time != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Time);
      }
      return size;
    }

    public void MergeFrom(Gpb_Time other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.Time != 0UL) {
        Time = other.Time;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            Time = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_RoadCell : pb::IMessage<Gpb_RoadCell> {
    private static readonly pb::MessageParser<Gpb_RoadCell> _parser = new pb::MessageParser<Gpb_RoadCell>(() => new Gpb_RoadCell());
    public static pb::MessageParser<Gpb_RoadCell> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[15]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_RoadCell() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_RoadCell(Gpb_RoadCell other) : this() {
      beliefTime_ = other.beliefTime_;
      isRoadEnd_ = other.isRoadEnd_;
      Cell = other.cell_ != null ? other.Cell.Clone() : null;
    }

    public Gpb_RoadCell Clone() {
      return new Gpb_RoadCell(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "isRoadEnd" field.</summary>
    public const int IsRoadEndFieldNumber = 2;
    private bool isRoadEnd_;
    public bool IsRoadEnd {
      get { return isRoadEnd_; }
      set {
        isRoadEnd_ = value;
      }
    }

    /// <summary>Field number for the "cell" field.</summary>
    public const int CellFieldNumber = 3;
    private global::AutonomyMsg.Gpb_GridCell cell_;
    public global::AutonomyMsg.Gpb_GridCell Cell {
      get { return cell_; }
      set {
        cell_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_RoadCell);
    }

    public bool Equals(Gpb_RoadCell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (IsRoadEnd != other.IsRoadEnd) return false;
      if (!object.Equals(Cell, other.Cell)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (IsRoadEnd != false) hash ^= IsRoadEnd.GetHashCode();
      if (cell_ != null) hash ^= Cell.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (IsRoadEnd != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsRoadEnd);
      }
      if (cell_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Cell);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (IsRoadEnd != false) {
        size += 1 + 1;
      }
      if (cell_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cell);
      }
      return size;
    }

    public void MergeFrom(Gpb_RoadCell other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.IsRoadEnd != false) {
        IsRoadEnd = other.IsRoadEnd;
      }
      if (other.cell_ != null) {
        if (cell_ == null) {
          cell_ = new global::AutonomyMsg.Gpb_GridCell();
        }
        Cell.MergeFrom(other.Cell);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            IsRoadEnd = input.ReadBool();
            break;
          }
          case 26: {
            if (cell_ == null) {
              cell_ = new global::AutonomyMsg.Gpb_GridCell();
            }
            input.ReadMessage(cell_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_SingleWaypoint : pb::IMessage<Gpb_SingleWaypoint> {
    private static readonly pb::MessageParser<Gpb_SingleWaypoint> _parser = new pb::MessageParser<Gpb_SingleWaypoint>(() => new Gpb_SingleWaypoint());
    public static pb::MessageParser<Gpb_SingleWaypoint> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[16]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_SingleWaypoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_SingleWaypoint(Gpb_SingleWaypoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      speed_ = other.speed_;
      heading_ = other.heading_;
      visited_ = other.visited_;
    }

    public Gpb_SingleWaypoint Clone() {
      return new Gpb_SingleWaypoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 5;
    private float heading_;
    public float Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "visited" field.</summary>
    public const int VisitedFieldNumber = 6;
    private bool visited_;
    public bool Visited {
      get { return visited_; }
      set {
        visited_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_SingleWaypoint);
    }

    public bool Equals(Gpb_SingleWaypoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      if (Speed != other.Speed) return false;
      if (Heading != other.Heading) return false;
      if (Visited != other.Visited) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (Heading != 0F) hash ^= Heading.GetHashCode();
      if (Visited != false) hash ^= Visited.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (Heading != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Heading);
      }
      if (Visited != false) {
        output.WriteRawTag(48);
        output.WriteBool(Visited);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Heading != 0F) {
        size += 1 + 4;
      }
      if (Visited != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(Gpb_SingleWaypoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Heading != 0F) {
        Heading = other.Heading;
      }
      if (other.Visited != false) {
        Visited = other.Visited;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
          case 45: {
            Heading = input.ReadFloat();
            break;
          }
          case 48: {
            Visited = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_WaypointPath : pb::IMessage<Gpb_WaypointPath> {
    private static readonly pb::MessageParser<Gpb_WaypointPath> _parser = new pb::MessageParser<Gpb_WaypointPath>(() => new Gpb_WaypointPath());
    public static pb::MessageParser<Gpb_WaypointPath> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[17]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_WaypointPath() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_WaypointPath(Gpb_WaypointPath other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      waypoints_ = other.waypoints_.Clone();
    }

    public Gpb_WaypointPath Clone() {
      return new Gpb_WaypointPath(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "waypoints" field.</summary>
    public const int WaypointsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AutonomyMsg.Gpb_SingleWaypoint> _repeated_waypoints_codec
        = pb::FieldCodec.ForMessage(34, global::AutonomyMsg.Gpb_SingleWaypoint.Parser);
    private readonly pbc::RepeatedField<global::AutonomyMsg.Gpb_SingleWaypoint> waypoints_ = new pbc::RepeatedField<global::AutonomyMsg.Gpb_SingleWaypoint>();
    public pbc::RepeatedField<global::AutonomyMsg.Gpb_SingleWaypoint> Waypoints {
      get { return waypoints_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_WaypointPath);
    }

    public bool Equals(Gpb_WaypointPath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if(!waypoints_.Equals(other.waypoints_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      hash ^= waypoints_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      waypoints_.WriteTo(output, _repeated_waypoints_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      size += waypoints_.CalculateSize(_repeated_waypoints_codec);
      return size;
    }

    public void MergeFrom(Gpb_WaypointPath other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      waypoints_.Add(other.waypoints_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 34: {
            waypoints_.AddEntriesFrom(input, _repeated_waypoints_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_CasualtyDelivery : pb::IMessage<Gpb_CasualtyDelivery> {
    private static readonly pb::MessageParser<Gpb_CasualtyDelivery> _parser = new pb::MessageParser<Gpb_CasualtyDelivery>(() => new Gpb_CasualtyDelivery());
    public static pb::MessageParser<Gpb_CasualtyDelivery> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[18]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_CasualtyDelivery() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_CasualtyDelivery(Gpb_CasualtyDelivery other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      greedy_ = other.greedy_;
      multiplicity_ = other.multiplicity_;
    }

    public Gpb_CasualtyDelivery Clone() {
      return new Gpb_CasualtyDelivery(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "greedy" field.</summary>
    public const int GreedyFieldNumber = 4;
    private bool greedy_;
    public bool Greedy {
      get { return greedy_; }
      set {
        greedy_ = value;
      }
    }

    /// <summary>Field number for the "multiplicity" field.</summary>
    public const int MultiplicityFieldNumber = 5;
    private int multiplicity_;
    public int Multiplicity {
      get { return multiplicity_; }
      set {
        multiplicity_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_CasualtyDelivery);
    }

    public bool Equals(Gpb_CasualtyDelivery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (Greedy != other.Greedy) return false;
      if (Multiplicity != other.Multiplicity) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (Greedy != false) hash ^= Greedy.GetHashCode();
      if (Multiplicity != 0) hash ^= Multiplicity.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (Greedy != false) {
        output.WriteRawTag(32);
        output.WriteBool(Greedy);
      }
      if (Multiplicity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Multiplicity);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (Greedy != false) {
        size += 1 + 1;
      }
      if (Multiplicity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiplicity);
      }
      return size;
    }

    public void MergeFrom(Gpb_CasualtyDelivery other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.Greedy != false) {
        Greedy = other.Greedy;
      }
      if (other.Multiplicity != 0) {
        Multiplicity = other.Multiplicity;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 32: {
            Greedy = input.ReadBool();
            break;
          }
          case 40: {
            Multiplicity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Gpb_SupplyPickup : pb::IMessage<Gpb_SupplyPickup> {
    private static readonly pb::MessageParser<Gpb_SupplyPickup> _parser = new pb::MessageParser<Gpb_SupplyPickup>(() => new Gpb_SupplyPickup());
    public static pb::MessageParser<Gpb_SupplyPickup> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::AutonomyMsg.AutonomyReflection.Descriptor.MessageTypes[19]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Gpb_SupplyPickup() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Gpb_SupplyPickup(Gpb_SupplyPickup other) : this() {
      beliefTime_ = other.beliefTime_;
      requestTime_ = other.requestTime_;
      actorId_ = other.actorId_;
      greedy_ = other.greedy_;
      multiplicity_ = other.multiplicity_;
    }

    public Gpb_SupplyPickup Clone() {
      return new Gpb_SupplyPickup(this);
    }

    /// <summary>Field number for the "belief_time" field.</summary>
    public const int BeliefTimeFieldNumber = 1;
    private ulong beliefTime_;
    public ulong BeliefTime {
      get { return beliefTime_; }
      set {
        beliefTime_ = value;
      }
    }

    /// <summary>Field number for the "request_time" field.</summary>
    public const int RequestTimeFieldNumber = 2;
    private ulong requestTime_;
    public ulong RequestTime {
      get { return requestTime_; }
      set {
        requestTime_ = value;
      }
    }

    /// <summary>Field number for the "actor_id" field.</summary>
    public const int ActorIdFieldNumber = 3;
    private int actorId_;
    public int ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    /// <summary>Field number for the "greedy" field.</summary>
    public const int GreedyFieldNumber = 4;
    private bool greedy_;
    public bool Greedy {
      get { return greedy_; }
      set {
        greedy_ = value;
      }
    }

    /// <summary>Field number for the "multiplicity" field.</summary>
    public const int MultiplicityFieldNumber = 5;
    private int multiplicity_;
    public int Multiplicity {
      get { return multiplicity_; }
      set {
        multiplicity_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Gpb_SupplyPickup);
    }

    public bool Equals(Gpb_SupplyPickup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BeliefTime != other.BeliefTime) return false;
      if (RequestTime != other.RequestTime) return false;
      if (ActorId != other.ActorId) return false;
      if (Greedy != other.Greedy) return false;
      if (Multiplicity != other.Multiplicity) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (BeliefTime != 0UL) hash ^= BeliefTime.GetHashCode();
      if (RequestTime != 0UL) hash ^= RequestTime.GetHashCode();
      if (ActorId != 0) hash ^= ActorId.GetHashCode();
      if (Greedy != false) hash ^= Greedy.GetHashCode();
      if (Multiplicity != 0) hash ^= Multiplicity.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (BeliefTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(BeliefTime);
      }
      if (RequestTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RequestTime);
      }
      if (ActorId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ActorId);
      }
      if (Greedy != false) {
        output.WriteRawTag(32);
        output.WriteBool(Greedy);
      }
      if (Multiplicity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Multiplicity);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (BeliefTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeliefTime);
      }
      if (RequestTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RequestTime);
      }
      if (ActorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActorId);
      }
      if (Greedy != false) {
        size += 1 + 1;
      }
      if (Multiplicity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Multiplicity);
      }
      return size;
    }

    public void MergeFrom(Gpb_SupplyPickup other) {
      if (other == null) {
        return;
      }
      if (other.BeliefTime != 0UL) {
        BeliefTime = other.BeliefTime;
      }
      if (other.RequestTime != 0UL) {
        RequestTime = other.RequestTime;
      }
      if (other.ActorId != 0) {
        ActorId = other.ActorId;
      }
      if (other.Greedy != false) {
        Greedy = other.Greedy;
      }
      if (other.Multiplicity != 0) {
        Multiplicity = other.Multiplicity;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BeliefTime = input.ReadUInt64();
            break;
          }
          case 16: {
            RequestTime = input.ReadUInt64();
            break;
          }
          case 24: {
            ActorId = input.ReadInt32();
            break;
          }
          case 32: {
            Greedy = input.ReadBool();
            break;
          }
          case 40: {
            Multiplicity = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
